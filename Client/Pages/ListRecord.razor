@page "/listRecord"

@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWASM_SignalR.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    .listTweets {
        overflow: scroll;
        width: 1300px;
    }

    .table_wrapper {
        display: block;
        white-space: nowrap;
    }
</style>


@if (listRecord == null)
{
    <p>Loading...</p>
}
else
{
    <div class="level">
        <div class="level-left">
            <h2>Nvidia SA Record</h2>
        </div>
        <div class="level-right">
            <div class="level-item">
                Page Item: &nbsp;
                <input style="width:50px;" @bind-value="Paging.PageSize" />
                &nbsp;
                @if (Paging != null && Paging.Enabled)
                {
                    @if (Paging.CustomPager)
                    {
                    }
                    else
                    {
                        <button class="btn btn-primary btn-sm my-0" @onclick="GoToPrevPage"><b>&lt;</b></button>
                        <span style="font-size: 12px; color: gray">&nbsp;&nbsp;Page @CurrentPageNumber of @Paging.MaxPageNumber(listRecord.Count())&nbsp;&nbsp;</span>
                        <button class="btn btn-primary btn-sm my-0" @onclick="GoToNextPage"><b>&gt;</b></button>
                    }
                }
            </div>
        </div>
    </div>

    <div class="listTweets">
        <div class="table_wrapper">
            <table class="table is-bordered is-narrow is-striped is-clipped">
                <thead>
                    <tr>
                        <td>Update</td>
                        <td>Date Reject </td>
                        <td>Prod User ID</td>

                        <td>Date In</td>
                        <td>Project</td>
                        <td>SN</td>
                        <td>PN</td>
                        <td>Product</td>
                        <td>SO</td>
                        <td>Line</td>
                        <td>Station</td>
                        <td>Defect Item</td>
                        <td>Machine ID</td>
                        <td>Operator ID</td>
                        <td>Date Scrap</td>
                        <td>Scrap Status</td>

                        <td>FA Done Date</td>
                        <td>FA Member</td>
                        <td>Detail Defect</td>
                        <td>Defect Area</td>
                        <td>FA Scrap ID</td>
                        <td>FA Remark</td>

                        <td>Investigation Date</td>
                        <td>PIC</td>

                        <td>6M</td>
                        <td>Defect Station</td>
                        <td>Defect Employee ID</td>
                        <td>Investigation Reference ID</td>
                        <td>Investigation Remark</td>

                        <td>Follow Up Date</td>
                        <td>Follow Up PIC</td>
                        <td>Follow Up Reference ID</td>
                        <td>Follow UP Status</td>
                        <td>Follow Up Remark</td>

                    </tr>
                </thead>
                <tbody>
                    @if (filteredRecord != null)
                    {
                        @foreach (var record in filteredRecord.Skip(Paging.NumOfItemsToSkip(CurrentPageNumber)).Take(Paging.NumOfItemsToTake(filteredRecord.Count())))
                        {
                            <tr>
                                <td>
                                    <span class="table-remove">
                                        <button type="submit"
                                                class="btn btn-primary btn-rounded btn-sm my-0"
                                                @onclick="() => EditRecord(record.IfFASA_id)">
                                            E
                                        </button>
                                        <button type="submit"
                                                class="btn btn-danger btn-rounded btn-sm my-0"
                                                @onclick="() => modalCard.Show()">
                                            R
                                        </button>
                                    </span>
                                </td>
                                <td>@Convert.ToDateTime(record.IDT_00).ToString("yyMMdd HHmm")</td>
                                <td>@record.UserID_00</td>

                                <td>@record.Prod_IDT</td>
                                <td>@record.Proj</td>
                                <td>@record.SA_SN</td>
                                <td>@record.SA_PN</td>
                                <td>@record.PName</td>
                                <td>@record.SA_SO</td>
                                <td>@record.Prod_Line</td>
                                <td>@record.Prod_Station</td>
                                <td>@record.Prod_Def</td>
                                <td>@record.Prod_ToolID</td>
                                <td>@record.Prod_OprID</td>
                                <td>@record.Dt_Scrap</td>
                                <td>@record.Scrap_Status</td>

                                <td>@record.IDT_01</td>
                                <td>@record.UserID_01</td>
                                <td>@record.DetDefect</td>
                                <td>@record.DefArea</td>
                                <td>@record.FsRefScrap_Id</td>
                                <td>@record.Remarks_01</td>

                                <td>@record.IDT_02</td>
                                <td>@record.UserID_02</td>

                                <td>@record.M6</td>
                                <td>@record.DefStation</td>
                                <td>@record.DefEmpID</td>
                                <td>@record.FsRefAct_Id</td>
                                <td>@record.Remarks_02</td>

                                <td>@record.IDT_03</td>
                                <td>@record.UserID_03</td>
                                <td>@record.FsRefFol_Id</td>
                                <td>@record.StaFollow</td>
                                <td>@record.Remarks_03</td>

                                <ModalCardComponent SN="@record.SA_SN" @ref="modalCard">
                                    <Control>
                                        <button class="button is-success" @onclick="(() => DeleteRecord(record.IfFASA_id))">OK</button>
                                    </Control>
                                </ModalCardComponent>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
    <br />

    <button type="button" class="btn btn-primary" @onclick="AddReject">Add Record</button>

    <span>
        &nbsp;
    </span>

    <button type="button" class="btn btn-primary" @onclick="Groupbysingleproperty">Droplist Filter SA_PN</button>
    <br />
    <br/>
    <form>

        @if (listFilter != null)
        {
            <input @oninput="filterInput" placeholder="Search..."/> <br/>

            @foreach (var _ in listFilter)
            {
                <input type="checkbox" @onchange="(EventArgs => { CheckboxClicked(_.Key, EventArgs.Value); })" />@_.Key<br />
            }
            <button type="button">OK</button>
            <button type="reset">Clear</button>
        }
        else { }

    </form>

    @theValue
    @inputValue

    @if (filteredRecord != null)
    {
        <ul>
            @foreach (var _ in filteredRecord)
            {
                <li>
                    @_.SA_SN
                </li>
            }
        </ul>
    }

    else 
    {
        <span>Filtered Record is null</span>
    }
}





@code {

    private string theValue = null;

    private string inputValue;

    private void CheckboxClicked(string value, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            theValue = value;

            filteredRecord = listRecord.Where(x => x.SA_PN.Contains(theValue)).ToList();

        }
        else
        {
            theValue = "";
            filteredRecord = listRecord.Where(x => !x.SA_PN.Contains(theValue)).ToList();
        }
    }

    private void filterInput(ChangeEventArgs changeEventArgs)
    {
        inputValue = changeEventArgs.Value.ToString();

        filteredRecord = listRecord.Where(x => x.SA_PN.Contains(inputValue)).ToList();

        Groupbysingleproperty();

    }

    public void Groupbysingleproperty()
    {
        if(filteredRecord != null)
        {
            var grouping =
            from p in filteredRecord
            group p by p.SA_PN into newgroup
            orderby newgroup.Key
            select newgroup;

            listFilter = grouping;
        }
        else
        {
            var grouping =
            from p in listRecord
            group p by p.SA_PN into newgroup
            orderby newgroup.Key
            select newgroup;

            listFilter = grouping;
        }

    }

    IEnumerable<IGrouping<string, InfoFASA>> listFilter;

    private ModalCardComponent modalCard;

    InfoFASA[] listRecord;

    List<InfoFASA> filteredRecord;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri("/RecordHub"))
    .Build();

        hubConnection.On("ReceiveMessage", () =>
        {

            CallLoadData();
            StateHasChanged();

        });

        await hubConnection.StartAsync();
        await LoadData();

    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }


    protected async Task LoadData()
    {

        listRecord = await Http.GetFromJsonAsync<InfoFASA[]>("api/InfoFASAs");
        StateHasChanged();

    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }


    private void AddReject()
    {
        NavigationManager.NavigateTo("/addRecord");
    }

    private void EditRecord(int id)
    {
        NavigationManager.NavigateTo("/editRecord/" + id);
    }

    protected async Task DeleteRecord(int id)
    {
        await Http.DeleteAsync("api/InfoFASAs/" + id);

        modalCard.Cancel();

        await LoadData();
    }

    public PageConfig Paging { get; set; } = new PageConfig
    {
        Enabled = true,
        CustomPager = false,
        PageSize = 10
    };

    public int CurrentPageNumber { get; set; } = 1;

    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }

    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, listRecord.Count());

    }
}