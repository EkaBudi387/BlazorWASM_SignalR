@page "/listRecord"

@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWASM_SignalR.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager

<h2>Record Details</h2>
<p>
    <a href="/addRecord">Create New Record</a>
</p>

@if (listRecord == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>DateIn</th>
                <th>SA_SN</th>
                <th>SA_PN</th>
                <th>Defect Item</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in listRecord)
            {
            <tr>
                <td>@record.DateIn</td>
                <td>@record.SA_SN</td>


                @foreach (var _ in modelList)
                {
                    if (_.SA_SN == record.SA_SN)
                    {

                        <td>@_.SA_PN</td>
                        <td>@_.State</td>

                        break;
                    }
                }


                <td>
                    <a href="/editRecord/@record.No">Edit</a>
                    <a href="/deleteRecord/@record.No">Delete</a>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    RecordDetails[] listRecord;

    SharedModelMySql[] modelList;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {

        modelList = await Http.GetFromJsonAsync<SharedModelMySql[]>("api/MySql/ModelList");

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/RecordHub"))
        .Build();

        hubConnection.On("ReceiveMessage", () =>
        {

            CallLoadData();
            StateHasChanged();

        });

        await hubConnection.StartAsync();
        await LoadData();

    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }


    protected async Task LoadData()
    {

        listRecord = await Http.GetFromJsonAsync<RecordDetails[]>("api/RecordDetails");
        StateHasChanged();

    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}