@page "/addRecord"

@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWASM_SignalR.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager


<h2>Create Record</h2>
<hr />

<form onsubmit="return false">
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="SA_SN" class="control-label">SA_SN</label>
                <input for="SA_SN" class="form-control" @bind="@record.SA_SN" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <br />
                <input type="button" class="btn btn-primary" @onclick="@CreateRecord" value="Save" />
                <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
</form>

@code {

    SharedModelMySql[] modelList;

    InfoFASA record = new InfoFASA();

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {

        modelList = await Http.GetFromJsonAsync<SharedModelMySql[]>("api/MySql/ModelList");

        hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri("/RecordHub"))
    .Build();

        await hubConnection.StartAsync();

    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;


    protected async Task CreateRecord()
    {
        record.IDT_00 = DateTime.Now;

        foreach(var _ in modelList)
        {
            if(record.SA_SN == _.SA_SN)
            {
                record.SA_PN = _.SA_PN;
                record.Prod_Def = _.State;
                record.SA_SO = _.SO;
                record.Prod_ToolID = _.Tool;
                record.Prod_Line = _.Line;
                record.Prod_OprID = _.Staff;
                record.Prod_Station = _.Station;
                record.IDT_00 = _.Time;   
            }
        }

        await Http.PostAsJsonAsync("api/InfoFASAs", record);
        if (IsConnected) await SendMessage();

        NavigationManager.NavigateTo("listRecord");
    }


    Task SendMessage() => hubConnection.SendAsync("SendMessage");


    void Cancel()
    {
        NavigationManager.NavigateTo("listRecord");

    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
    }